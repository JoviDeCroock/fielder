{"version":3,"sources":["webpack:///../src/api/useForm.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"kfAMO,IAAMA,EAAe,Q,qMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,WADR,WAGA,qBAAG,kBAAIC,WAAW,KAAf,iCACH,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,wCAIL,iBAAQ,CACN,GAAM,iBADR,iBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4GAML,iBAAQ,CACN,GAAM,eADR,eAGA,qBAAG,kBAAIA,WAAW,KAAf,yBAA6C,mBAAGA,WAAW,MAAS,CACjE,KAAQ,eADkC,eAA7C,wCAGH,8BAAa,0BAAYA,WAAW,KAAvB,cACb,iBAAQ,CACN,GAAM,aADR,aAGA,qBAAG,kBAAIA,WAAW,KAAf,WAAH,gCACA,iBAAQ,CACN,GAAM,SADR,SAGA,iBAAQ,CACN,GAAM,aADR,aAGA,uFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,mbAcL,iBAAQ,CACN,GAAM,cADR,cAGA,uFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4d,4LAyBTJ,EAAWK,gBAAiB","file":"component---src-api-use-form-mdx-1f44b9ba4b308b2c1580.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/andyrichardson/development/fielder/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"useform\"\n    }}>{`useForm`}</h1>\n    <p><em parentName=\"p\">{`Creates a new form instance.`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { useForm } from \"fielder\"\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example-usage\"\n    }}>{`Example Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const formState = useForm()\n\nreturn <FielderProvider value={formState}>{children}</FielderProvider>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"return-type\"\n    }}>{`Return type`}</h2>\n    <p><em parentName=\"p\">{`The state of the form `}<a parentName=\"em\" {...{\n          \"href\": \"#formstate\"\n        }}>{`(FormState)`}</a>{` along with accessors and mutators.`}</em></p>\n    <p>{`Type: `}<inlineCode parentName=\"p\">{`FormState`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"arguments\"\n    }}>{`Arguments`}</h2>\n    <p><em parentName=\"p\">{`useForm`}</em>{` doesn't take any arguments.`}</p>\n    <h2 {...{\n      \"id\": \"types\"\n    }}>{`Types`}</h2>\n    <h3 {...{\n      \"id\": \"formstate\"\n    }}>{`FormState`}</h3>\n    <p>{`The state of the whole form along with accessors and mutators.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`export interface FormState<T extends Record<string, any> = any> {\n  fields: Record<string, FieldState>\n  isValid: boolean\n  isValidating: boolean\n  mountField: (k: FieldConfig<T>) => void\n  unmountField: (k: UnmountFieldArgs<T>) => void\n  setFieldValue: (a: SetFieldValueArgs<T>) => void\n  blurField: (a: BlurFieldArgs<T>) => void\n  validateField: (a: { name: keyof T & string }) => void\n  validateFields: () => void\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"fieldstate\"\n    }}>{`FieldState`}</h3>\n    <p>{`The state of an individual field (including meta information).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export interface FieldState<T = string | boolean | number> {\n  // Internals\n  readonly _isActive: boolean\n  readonly _validateOnChange: boolean\n  readonly _validateOnBlur: boolean\n  readonly _validateOnUpdate: boolean\n  readonly _validate: FieldConfig[\"validate\"]\n\n  // Props\n  readonly name: string\n  readonly value?: T\n\n  // Meta\n  readonly error?: FormError\n  readonly touched: boolean\n  readonly isValid: boolean\n  readonly isValidating: boolean\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}