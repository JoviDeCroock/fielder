{"version":3,"sources":["webpack:///../src/guides/getting-started.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"ofAMO,IAAMA,EAAe,Q,gNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,mBADR,mBAGA,4DAA2C,0BAAYC,WAAW,KAAvB,WAA3C,KACA,iBAAQ,CACN,GAAM,mBADR,mBAGA,4GACA,iBAAQ,CACN,GAAM,mBADR,mBAGA,8FACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oBAIL,iBAAQ,CACN,GAAM,8BADR,8BAGA,mHACA,sBACE,kBAAIA,WAAW,MAAf,yBAA8C,0BAAYA,WAAW,MAAvB,YAC9C,kBAAIA,WAAW,MAAf,yCAEF,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4YAgBL,mCAAkB,0BAAYA,WAAW,KAAvB,mBAAlB,iBAA+F,0BAAYA,WAAW,KAAvB,YAA/F,qCACA,8BACE,iBAAGA,WAAW,cAAd,kHAEF,iBAAQ,CACN,GAAM,sBADR,sBAGA,qEACA,8BACE,iBAAGA,WAAW,cAAd,kJAEF,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+TAkBL,iBAAQ,CACN,GAAM,6BADR,6BAGA,2HAA0G,0BAAYA,WAAW,KAAvB,WAA1G,2BACoB,0BAAYA,WAAW,KAAvB,SADpB,KAC2E,mBAAGA,WAAW,KAAQ,CAC7F,KAAQ,+EAD+D,kBAD3E,MAIA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,ooBAyBL,iBAAQ,CACN,GAAM,kBADR,kBAGA,gCAAe,0BAAYA,WAAW,KAAvB,SAAf,+CAAgH,0BAAYA,WAAW,KAAvB,OAAhH,SACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,0IAKL,8BACE,iBAAGA,WAAW,cAAd,uDAAmF,0BAAYA,WAAW,KAAvB,OAAnF,uDAEF,qBAAG,sBAAQA,WAAW,KAAnB,UAAH,gEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,sI,uMASTJ,EAAWK,gBAAiB","file":"component---src-guides-getting-started-mdx-a03401ec1eac4af2a707.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/andyrichardson/development/form/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"getting-started\"\n    }}>{`Getting started`}</h1>\n    <p>{`All you need to know to start using `}<inlineCode parentName=\"p\">{`Fielder`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"creating-a-form\"\n    }}>{`Creating a form`}</h2>\n    <p>{`So you know you want to make a form but don't know where to start? Look no further!`}</p>\n    <h3 {...{\n      \"id\": \"install-fielder\"\n    }}>{`Install fielder`}</h3>\n    <p>{`Add fielder to your dependencies using you package manager of choice.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`npm i fielder\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"create-your-form-component\"\n    }}>{`Create your form component`}</h3>\n    <p>{`Every form starts in the same way, you want to make your form component which is going to:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Create an instance of `}<inlineCode parentName=\"li\">{`Fielder`}</inlineCode></li>\n      <li parentName=\"ul\">{`Expose that instance to any children`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import React, { useEffect } from 'react';\nimport { useForm, FielderProvider } from 'fielder';\n\nconst LoginForm = ({ children }) => {\n  const formState = useForm();\n\n  // Example of reacting to form changes\n  useEffect(() => {\n    console.log('Form state has changed!', formState);\n  }, [formState]);\n\n  return <FielderProvider value={formState}>{children}</FielderProvider>;\n};\n`}</code></pre>\n    <p>{`The use of `}<inlineCode parentName=\"p\">{`FielderProvider`}</inlineCode>{` ensures that `}<inlineCode parentName=\"p\">{`useField`}</inlineCode>{` can later access the form state.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Forms can be a small section on a page, or can span across multiple pages (i.e. steppers/wizards/multi-step).`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"adding-some-fields\"\n    }}>{`Adding some fields`}</h2>\n    <p>{`Next we want to add some fields to our form.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`It's important to remember that fielder treats fields as dynamic entities. This means they can be added, removed, and/or changed at any time.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const MyFormContent = () => {\n  const [usernameProps] = useField({\n    name: 'username'\n  });\n  const [passwordProps] = useField({\n    name: 'password'\n  });\n\n  return (\n    <form>\n      <input type=\"text\" {...usernameProps} />\n      <input type=\"text\" {...passwordProps} />\n    </form>\n  );\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"checkbox-and-radio-inputs\"\n    }}>{`Checkbox and Radio inputs`}</h2>\n    <p>{`Checkbox and radio inputs are different to all other field types as their state is declared by the `}<inlineCode parentName=\"p\">{`checked`}</inlineCode>{`\nattribute rather than `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` (`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/andyrichardson/fielder/issues/23#issuecomment-576352847\"\n      }}>{`more info here`}</a>{`).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const [hobbiesProps] = useField({\n  name: 'hobbies'\n});\nconst [termsProps] = useField({\n  name: 'terms'\n});\n\nreturn (\n  <>\n    <fieldset>\n      <p>What are your hobbies</p>\n      <input type=\"checkbox\" {...hobbiesProps} value=\"sports\" /> Sports\n      <input type=\"checkbox\" {...hobbiesProps} value=\"coding\" /> Coding\n      <input type=\"checkbox\" {...hobbiesProps} value=\"other\" /> Other\n    </fieldset>\n    <fieldset>\n      <p>Do you accept the terms & conditions</p>\n      <input type=\"radio\" {...termsProps} value=\"yes\" /> Yes\n      <input type=\"radio\" {...termsProps} value=\"no\" /> No\n    </fieldset>\n  </>\n);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"things-to-note\"\n    }}>{`Things to note`}</h3>\n    <p>{`Use the `}<inlineCode parentName=\"p\">{`input`}</inlineCode>{` element, or a component which forwards the `}<inlineCode parentName=\"p\">{`ref`}</inlineCode>{` prop`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`// This will prevent the checked state from being in sync\n<input type=\"radio\" {...radioProps} value=\"accept\" ref={someOtherRef} />\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Because of how checkboxes differ to other elements, `}<inlineCode parentName=\"p\">{`ref`}</inlineCode>{` access to checkbox and radio elements is required`}</p>\n    </blockquote>\n    <p><strong parentName=\"p\">{`Do not`}</strong>{` manually set the checked prop - this is handled by Fielder.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`// This is unnecessary and will cause conflicts\n<input type=\"radio\" {...radioProps} value=\"accept\" checked={someCondition} />\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}