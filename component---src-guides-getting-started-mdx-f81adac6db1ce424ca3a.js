(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{"8cUG":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return s})),n.d(t,"default",(function(){return c}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var a=n("/FXl"),o=n("TjRS");n("aD51");function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var s={};void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/guides/getting-started.mdx"}});var l={_frontmatter:s},i=o.a;function c(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["components"]);return Object(a.b)(i,r({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"getting-started"},"Getting started"),Object(a.b)("p",null,"All you need to know to start using ",Object(a.b)("inlineCode",{parentName:"p"},"Fielder"),"."),Object(a.b)("h2",{id:"creating-a-form"},"Creating a form"),Object(a.b)("p",null,"So you know you want to make a form but don't know where to start? Look no further!"),Object(a.b)("h3",{id:"install-fielder"},"Install fielder"),Object(a.b)("p",null,"Add fielder to your dependencies using you package manager of choice."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-sh"}),"npm i fielder\n")),Object(a.b)("h3",{id:"create-your-form-component"},"Create your form component"),Object(a.b)("p",null,"Every form starts in the same way, you want to make your form component which is going to:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Create an instance of ",Object(a.b)("inlineCode",{parentName:"li"},"Fielder")),Object(a.b)("li",{parentName:"ul"},"Expose that instance to any children")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-tsx"}),"import React, { useEffect } from 'react';\nimport { useForm, FielderProvider } from 'fielder';\n\nconst LoginForm = ({ children }) => {\n  const formState = useForm();\n\n  // Example of reacting to form changes\n  useEffect(() => {\n    console.log('Form state has changed!', formState);\n  }, [formState]);\n\n  return <FielderProvider value={formState}>{children}</FielderProvider>;\n};\n")),Object(a.b)("p",null,"The use of ",Object(a.b)("inlineCode",{parentName:"p"},"FielderProvider")," ensures that ",Object(a.b)("inlineCode",{parentName:"p"},"useField")," can later access the form state."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Forms can be a small section on a page, or can span across multiple pages (i.e. steppers/wizards/multi-step).")),Object(a.b)("h2",{id:"adding-some-fields"},"Adding some fields"),Object(a.b)("p",null,"Next we want to add some fields to our form."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"It's important to remember that fielder treats fields as dynamic entities. This means they can be added, removed, and/or changed at any time.")),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-tsx"}),"const MyFormContent = () => {\n  const [usernameProps] = useField({\n    name: 'username'\n  });\n  const [passwordProps] = useField({\n    name: 'password'\n  });\n\n  return (\n    <form>\n      <input type=\"text\" {...usernameProps} />\n      <input type=\"text\" {...passwordProps} />\n    </form>\n  );\n};\n")),Object(a.b)("h2",{id:"checkbox-and-radio-inputs"},"Checkbox and Radio inputs"),Object(a.b)("p",null,"Checkbox and radio inputs are different to all other field types as their state is declared by the ",Object(a.b)("inlineCode",{parentName:"p"},"checked"),"\nattribute rather than ",Object(a.b)("inlineCode",{parentName:"p"},"value")," (",Object(a.b)("a",r({parentName:"p"},{href:"https://github.com/andyrichardson/fielder/issues/23#issuecomment-576352847"}),"more info here"),")."),Object(a.b)("p",null,"To prevent hacking around with refs, you'll need to manually set the value and checked attributes."),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-tsx"}),'const [hobbiesProps] = useField({\n  name: \'hobbies\',\n  initialValue: [\'sports\'],\n});\nconst [termsProps] = useField({\n  name: \'terms\'\n});\n\nconst hobbiesOptions = useMemo(() => [\n  { label: "Sports", value: "sports" },\n  { label: "Coding", value: "coding" },\n  { label: "Other", value: "other" },\n], []);\n\nconst termsOptions = useMemo(() => [\n  { label: "Yes", value: "yes" },\n  { label: "No", value: "no" },\n], [])\n\nreturn (\n  <>\n    <fieldset>\n      <p>What are your hobbies</p>\n      {hobbiesOptions.map(({ label, value }) => (\n        <input\n          key={value}\n          type="checkbox"\n          {...hobbiesProps}\n          value={value}\n          checked={hobbiesProps.value.includes(value)}\n        />\n        {label}\n      ))}\n    </fieldset>\n    <fieldset>\n      <p>Do you accept the terms & conditions</p>\n      {termsOptions.map(({ label, value }) => (\n        <input\n          key={value}\n          type="radio"\n          {...termsProps}\n          value={value}\n          checked={termsProps.value === value}\n        />\n        {label}\n      ))}\n    </fieldset>\n  </>\n);\n')),Object(a.b)("h3",{id:"things-to-note"},"Things to note"),Object(a.b)("p",null,"The value attribute should be specified after spreading in your field props"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-tsx"}),'// This will not work\n<input type="radio" value="accept" {...radioProps} />\n\n// This will work\n<input type="radio" {...radioProps} value="accept" />\n')),Object(a.b)("p",null,"Set the initial value of your checkbox state to an array"),Object(a.b)("pre",null,Object(a.b)("code",r({parentName:"pre"},{className:"language-tsx"}),"const [hobbiesProps] = useField({\n  name: 'hobbies',\n  initialValue: ['sports', 'coding'] // checkboxes with these values will be checked\n});\n")))}c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/guides/getting-started.mdx"}}),c.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-guides-getting-started-mdx-f81adac6db1ce424ca3a.js.map