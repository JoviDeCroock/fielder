{"version":3,"sources":["webpack:///../src/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"qfAMO,IAAMA,EAAe,Q,+LAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,SADR,SAGA,qBAAG,kBAAIC,WAAW,KAAf,WAAH,0EAAiH,sBAAQA,WAAW,KAAnB,eAAjH,4BACA,6CACA,sBACE,kBAAIA,WAAW,MAAf,wDACA,kBAAIA,WAAW,MAAf,yEACA,kBAAIA,WAAW,MAAf,wDAEF,iBAAQ,CACN,GAAM,YADR,YAGA,iBAAQ,CACN,GAAM,wBADR,wBAGA,4GACA,8FACA,iBAAQ,CACN,GAAM,6BADR,6BAGA,wKACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+KASL,iBAAQ,CACN,GAAM,oBADR,oBAGA,4HAA2G,kBAAIA,WAAW,KAAf,WAA3G,uCACA,0FACA,iBAAQ,CACN,GAAM,wBADR,wBAGA,qBAAG,kBAAIA,WAAW,KAAf,WAAH,yFAAgI,0BAAYA,WAAW,KAAvB,YAAhI,KAA0L,0BAAYA,WAAW,KAAvB,WAA1L,QAAsP,0BAAYA,WAAW,KAAvB,kBAAtP,KACA,sHAAqG,kBAAIA,WAAW,KAAf,WAArG,qCACA,iBAAQ,CACN,GAAM,SADR,SAGA,iBAAQ,CACN,GAAM,qBADR,qBAGA,qBAAG,0BAAYA,WAAW,KAAvB,WAAH,2GAAkK,0BAAYA,WAAW,KAAvB,YAAlK,4CACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,wGAML,iBAAQ,CACN,GAAM,oBADR,oBAGA,qBAAG,0BAAYA,WAAW,KAAvB,YAAH,sCAA8F,kBAAIA,WAAW,KAAf,WAA9F,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,2TAcL,gGAA+E,0BAAYA,WAAW,KAAvB,YAA/E,wBACA,sBACE,kBAAIA,WAAW,MAAf,kBACA,kBAAIA,WAAW,MAAf,gEACA,kBAAIA,WAAW,MAAf,sDACA,kBAAIA,WAAW,MAAf,0BAEF,8BACE,iBAAGA,WAAW,cAAd,8CAA0E,kBAAIA,WAAW,KAAf,WAA1E,4E,sLAMNJ,EAAWK,gBAAiB","file":"component---src-index-mdx-c87808893a907378029e.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/andyrichardson/development/form/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"about\"\n    }}>{`About`}</h1>\n    <p><em parentName=\"p\">{`Fielder`}</em>{` is a React form library that has been built from the ground up with a `}<strong parentName=\"p\">{`field-first`}</strong>{` approach to validation.`}</p>\n    <p>{`What does this mean?`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Validation can easily be added and removed to a form`}</li>\n      <li parentName=\"ul\">{`Only validate what the user can see (see cross form validation below)`}</li>\n      <li parentName=\"ul\">{`No need for a large set of upfront domain knowledge`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"features\"\n    }}>{`Features`}</h2>\n    <h3 {...{\n      \"id\": \"immediate-validation\"\n    }}>{`Immediate validation`}</h3>\n    <p>{`Synchronous validation will update state immediately in the event of a change/blur.`}</p>\n    <p>{`Fewer renders, better performance and no weird \"intermediary states\".`}</p>\n    <h3 {...{\n      \"id\": \"optimized-for-flexibility\"\n    }}>{`Optimized for flexibility`}</h3>\n    <p>{`While Yup is supported, you're not limited to using a large Yup schema. Validation functions receive the form state as well as the field value.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`(value, state) =>\n  state.otherField.value === 'string'\n    ? Yup.string()\n        .required()\n        .validateSync(value)\n    : Yup.number().validateSync(value);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"user-focused-api\"\n    }}>{`User focused API`}</h3>\n    <p>{`Users don't want to find out that the value they entered on a previous page is invalid. This is why `}<em parentName=\"p\">{`Fielder`}</em>{` encourages field-level validation.`}</p>\n    <p>{`If the field isn't mounted, the value won't be validated. Simple!`}</p>\n    <h3 {...{\n      \"id\": \"one-way-to-do-things\"\n    }}>{`One way to do things`}</h3>\n    <p><em parentName=\"p\">{`Fielder`}</em>{` has been built with hooks since day one. There aren't any clunky APIs to learn, only `}<inlineCode parentName=\"p\">{`useField`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`useForm`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`useFormContext`}</inlineCode>{`.`}</p>\n    <p>{`Your data doesn't need to be coupled to your components (and likely shouldn't be), that's why `}<em parentName=\"p\">{`Fielder`}</em>{` doesn't include a component API.`}</p>\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <h3 {...{\n      \"id\": \"setting-up-a-form\"\n    }}>{`Setting up a form`}</h3>\n    <p><inlineCode parentName=\"p\">{`useForm`}</inlineCode>{` is where you initiate your form. In order to expose the form to any child components (and subsequently `}<inlineCode parentName=\"p\">{`useField`}</inlineCode>{`), you'll want to expose it via context.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const myForm = useForm();\n\nreturn <FielderProvider value={myForm}>{children}</FielderProvider>;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"declaring-fields\"\n    }}>{`Declaring fields`}</h3>\n    <p><inlineCode parentName=\"p\">{`useField`}</inlineCode>{` is where you harness the power of `}<em parentName=\"p\">{`Fielder`}</em>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const [nameProps, nameMeta] = useField({\n  name: 'userName',\n  validate: useCallback((v) => Yup.string().required().validateSync(v), []);\n});\n\nreturn (\n  <>\n    <input type=\"text\" {...nameProps} />\n    {nameMeta.touched && nameMeta.error && <ErrorMessage>{nameMeta.error}</ErrorMessage>}\n  </>\n);\n`}</code></pre>\n    <p>{`There are a whole number of additional arguments which can be passed to `}<inlineCode parentName=\"p\">{`useField`}</inlineCode>{` which allow you to:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Set validation`}</li>\n      <li parentName=\"ul\">{`Set when validation is triggered (e.g. on blur, change, etc)`}</li>\n      <li parentName=\"ul\">{`Set initial value, error, valid and touched states`}</li>\n      <li parentName=\"ul\">{`Set unmount behaviour`}</li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note: Unlike other popular form libraries, `}<em parentName=\"p\">{`Fielder`}</em>{` allows you to change config options (such as validation) at any time.`}</p>\n    </blockquote>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}