{"version":3,"sources":["webpack:///../src/guides/validation.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,2MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,cADR,cAGA,uHACA,iBAAQ,CACN,GAAM,wBADR,wBAGA,2IACsB,sBAAQC,WAAW,KAAnB,gBADtB,aAEA,8BACE,iBAAGA,WAAW,cAAd,kGAEF,2DACA,sBACE,kBAAIA,WAAW,MAAf,yCACA,kBAAIA,WAAW,MAAf,2DACA,kBAAIA,WAAW,MAAf,4DAEF,iBAAQ,CACN,GAAM,gBADR,gBAGA,iDAAgC,sBAAQA,WAAW,KAAnB,WAAhC,sBACA,6JACA,iBAAQ,CACN,GAAM,oBADR,oBAGA,kFAAiE,0BAAYA,WAAW,KAAvB,YAAjE,6CACA,8BACE,iBAAGA,WAAW,cAAd,kFAEF,iBAAQ,CACN,GAAM,oBADR,oBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,4NAcL,8LAEA,iBAAQ,CACN,GAAM,0BADR,0BAGA,uIACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,gKAQL,iBAAQ,CACN,GAAM,0BADR,0BAGA,uLAEA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,qJAUL,8BACE,iBAAGA,WAAW,cAAd,+EAA2G,0BAAYA,WAAW,KAAvB,iBAE7G,iBAAQ,CACN,GAAM,6BADR,6BAGA,+FAA8E,0BAAYA,WAAW,KAAvB,OAA9E,MACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+DAIL,8BACE,iBAAGA,WAAW,cAAd,oH,kMAONJ,EAAWK,gBAAiB","file":"component---src-guides-validation-mdx-5f7c8546c0e1dc336a29.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/andyrichardson/development/fielder/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"validation\"\n    }}>{`Validation`}</h1>\n    <p>{`Validation is one of the key ways in which Fielder differentiates itself from other libraries.`}</p>\n    <h2 {...{\n      \"id\": \"how-validation-works\"\n    }}>{`How validation works`}</h2>\n    <p>{`While most libraries require a form's validation criteria to be declared upfront, Fielder\ntreats validation as an `}<strong parentName=\"p\">{`evolutionary`}</strong>{` process.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Fielder allows you to have a valid state, even if your whole form isn't ready to be submitted`}</p>\n    </blockquote>\n    <p>{`This has the following advantages:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Validation can be incrementally added`}</li>\n      <li parentName=\"ul\">{`Presenting validation state to the user is much simpler`}</li>\n      <li parentName=\"ul\">{`Wizards/steppers/multi-page forms just work (see below)`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"valid-states\"\n    }}>{`Valid states`}</h3>\n    <p>{`A form is valid when all `}<strong parentName=\"p\">{`visible`}</strong>{` fields are valid.`}</p>\n    <p>{`A valid state implies the user has done their job and is able to progress to the next action (i.e. next page, next section, submit).`}</p>\n    <h3 {...{\n      \"id\": \"using-validation\"\n    }}>{`Using validation`}</h3>\n    <p>{`Adding validation is as simple as providing a function to `}<inlineCode parentName=\"p\">{`useField`}</inlineCode>{` which is called on a given change event.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Form-wide validation is not supported in Fielder (see above for reasons why).`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"basic-validation\"\n    }}>{`Basic validation`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`useField({\n  name: 'password'\n  validate: validatePassword,\n});\n\n// ...\nconst validatePassword = (val) => {\n  if (!val || val.length < 8) {\n    throw Error(\"Password must be 8 characters long\");\n  }\n};\n`}</code></pre>\n    <p>{`Your validation function should take 1 or 2 values (field state and form state, respectively), and should\nthrow an error orn string if validation is not successful.`}</p>\n    <h2 {...{\n      \"id\": \"cross-field-validation\"\n    }}>{`Cross field validation`}</h2>\n    <p>{`The below example demonstrates is a cross field validation function which checks other values within the form.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const validateDrink = (val, state) => {\n  if (Number(state.age.value) < 21 && val === \"Beer\") {\n    throw Error(\"You must be 21 to order Beer\")\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"conditional-validation\"\n    }}>{`Conditional validation`}</h2>\n    <p>{`As you would expect, Fielder reacts to changes to it's hooks. This means validation functions\ncan be conditionally added, changed and/or removed at any time.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`useField({\n  name: 'password'\n  validate: useMemo(() =>\n    shouldValidate ? validatePassword : undefined,\n    [shouldValidate]\n  ),\n});\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`You'll want to wrap any functions being declared inside of a component with `}<inlineCode parentName=\"p\">{`useCallback`}</inlineCode></p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"using-3rd-party-libraries\"\n    }}>{`Using 3rd party libraries`}</h2>\n    <p>{`You can use simple JS, or any validation library you desire (including `}<inlineCode parentName=\"p\">{`Yup`}</inlineCode>{`).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const validateFn = val => Yup.string().validateSync(val)\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`It's advised that you use synchronous validation where possible to reduce the number of\nrenders in your form.`}</p>\n    </blockquote>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}