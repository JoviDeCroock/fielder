{"version":3,"sources":["webpack:///../src/guides/type-safety.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,4MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,eADR,eAGA,qBAAG,kBAAIC,WAAW,KAAf,4EAAH,KACA,iBAAQ,CACN,GAAM,oBADR,oBAGA,8DACA,sBACE,kBAAIA,WAAW,MAAf,mDACA,kBAAIA,WAAW,MAAf,wCAEF,iBAAQ,CACN,GAAM,gBADR,gBAGA,0JACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wGAQL,0CAAyB,0BAAYA,WAAW,KAAvB,YAAzB,KAAmF,0BAAYA,WAAW,KAAvB,WAAnF,QAA+I,0BAAYA,WAAW,KAAvB,kBAA/I,wCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,wEAIL,iBAAQ,CACN,GAAM,mBADR,mBAGA,oGACA,8BACE,iBAAGA,WAAW,cAAd,iEAEF,iCAAgB,0BAAYA,WAAW,KAAvB,cAAhB,0EACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iKAOL,kDAAiC,kBAAIA,WAAW,KAAf,WAAjC,uDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,oI,mMAaTJ,EAAWK,gBAAiB","file":"component---src-guides-type-safety-mdx-4630ec8f7d0ddcfd47c2.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/andyrichardson/development/form/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"type-safety\"\n    }}>{`Type safety`}</h1>\n    <p><em parentName=\"p\">{`Fielder is written in TypeScript and supports type safety out of the box`}</em>{`.`}</p>\n    <h2 {...{\n      \"id\": \"why-to-use-types\"\n    }}>{`Why to use types`}</h2>\n    <p>{`By using types with Fielder, you can:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Enforce field types (setters and return values)`}</li>\n      <li parentName=\"ul\">{`Enforce field names (prevent typos)`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"basic-typing\"\n    }}>{`Basic typing`}</h2>\n    <p>{`In order to begin, you'll need to create an interface/type which demonstrates all the fields which could be mounted in your form.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface MyFormState {\n  username: string;\n  password: string;\n  saveCredentials: boolean;\n}\n`}</code></pre>\n    <p>{`Now, when calling `}<inlineCode parentName=\"p\">{`useField`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`useForm`}</inlineCode>{`, or `}<inlineCode parentName=\"p\">{`useFormContext`}</inlineCode>{`, pass your form state as a generic.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const [fieldProps] = useField<MyFormState>({ name: 'password' });\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"advanced-typing\"\n    }}>{`Advanced typing`}</h2>\n    <p>{`If you prefer not to manually type every hook call, you can re-export them.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`You'll want to follow this process for each form you create.`}</p>\n    </blockquote>\n    <p>{`Create a `}<inlineCode parentName=\"p\">{`fielder.ts`}</inlineCode>{` file alongside your form's root component and copy the example below.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { typedHooks } from 'fielder';\nimport { FormType } from './types';\n\nexport const { useField, useForm, useFormContext } = typedHooks<FormType>();\n`}</code></pre>\n    <p>{`Now when using any of the `}<em parentName=\"p\">{`Fielder`}</em>{` hooks, import them from the file you just created.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { useField } from '../fielder';\n\n// ...\nconst [fieldProps] = useField({\n  name: 'invalidName' // Type error!\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}