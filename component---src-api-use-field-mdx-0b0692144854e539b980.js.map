{"version":3,"sources":["webpack:///../src/api/useField.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-api-use-field-mdx-0b0692144854e539b980.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/andyrichardson/development/form/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"usefield\"\n    }}>{`useField`}</h1>\n    <p><em parentName=\"p\">{`Hook to mount a field to the form.`}</em></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { useField } from 'fielder';\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"example-usage\"\n    }}>{`Example usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const [passwordProps, passwordMeta] = useField({\n  name: 'password',\n  validate: passwordValidation,\n});\n\nreturn <input type={'password'} {...passwordProps} />;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"return-type\"\n    }}>{`Return type`}</h2>\n    <p><em parentName=\"p\">{`An array containing props for the target component `}<a parentName=\"em\" {...{\n          \"href\": \"#usefieldprops\"\n        }}>{`(UseFieldProps)`}</a>{` and metadata `}<a parentName=\"em\" {...{\n          \"href\": \"#usefieldmeta\"\n        }}>{`(UseFieldMeta)`}</a>{`.`}</em></p>\n    <p>{`Type: `}<inlineCode parentName=\"p\">{`[UseFieldProps, UseFieldMeta]`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"arguments\"\n    }}>{`Arguments`}</h2>\n    <p><em parentName=\"p\">{`useField`}</em>{` takes a single object with the following properties:`}</p>\n    <h3 {...{\n      \"id\": \"name-required\"\n    }}>{`name `}<strong parentName=\"h3\">{`(required)`}</strong></h3>\n    <p><em parentName=\"p\">{`The name/key of the field to be added to the form state.`}</em></p>\n    <p>{`Type: `}<inlineCode parentName=\"p\">{`string`}</inlineCode></p>\n    <p>{`Example: `}<inlineCode parentName=\"p\">{`password`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"validate\"\n    }}>{`validate`}</h3>\n    <p><em parentName=\"p\">{`A validation function which throws an error when validation has failed.`}</em></p>\n    <p>{`Type: `}<inlineCode parentName=\"p\">{`(value: string, formState: FormState) => (void | Promise<void>)`}</inlineCode></p>\n    <p>{`Default: `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode></p>\n    <p>{`Example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`(v, f) => {\n  if (v < f.otherField.value) {\n    throw Error(\"Value must be more than 'from' value\")\n  }\n}\\`\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"initialvalid\"\n    }}>{`initialValid`}</h3>\n    <p><em parentName=\"p\">{`Whether the initial value should be considered valid.`}</em></p>\n    <p>{`Type: `}<inlineCode parentName=\"p\">{`boolean`}</inlineCode></p>\n    <p>{`Default: `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` (see comment below)`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`When no `}<inlineCode parentName=\"p\">{`validate`}</inlineCode>{` argument is passed to `}<inlineCode parentName=\"p\">{`useField`}</inlineCode>{`, the default value is `}<inlineCode parentName=\"p\">{`true`}</inlineCode></p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"initialerror\"\n    }}>{`initialError`}</h3>\n    <p><em parentName=\"p\">{`The initial error of the field.`}</em></p>\n    <p>{`Type: `}<inlineCode parentName=\"p\">{`string | Error`}</inlineCode></p>\n    <p>{`Default: `}<inlineCode parentName=\"p\">{`undefined`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"initialvalue\"\n    }}>{`initialValue`}</h3>\n    <p><em parentName=\"p\">{`The value of the field on first mount (first mount after being destroyed).`}</em></p>\n    <p>{`Type: `}<inlineCode parentName=\"p\">{`string | boolean`}</inlineCode></p>\n    <p>{`Default: `}<inlineCode parentName=\"p\">{`\"\"`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"initialtouched-deprecated\"\n    }}>{`initialTouched `}<strong parentName=\"h3\">{`(deprecated)`}</strong></h3>\n    <p><em parentName=\"p\">{`Whether the initial state of the field is 'touched'.`}</em></p>\n    <p>{`Type: `}<inlineCode parentName=\"p\">{`boolean`}</inlineCode></p>\n    <p>{`Default: `}<inlineCode parentName=\"p\">{`false`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"validateonblur\"\n    }}>{`validateOnBlur`}</h3>\n    <p><em parentName=\"p\">{`Whether the provided validate function should be called on blur.`}</em></p>\n    <p>{`Type: `}<inlineCode parentName=\"p\">{`boolean`}</inlineCode></p>\n    <p>{`Default: `}<inlineCode parentName=\"p\">{`true`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"validateonchange\"\n    }}>{`validateOnChange`}</h3>\n    <p><em parentName=\"p\">{`Whether the provided validate function should be called on change.`}</em></p>\n    <p>{`Type: `}<inlineCode parentName=\"p\">{`boolean`}</inlineCode></p>\n    <p>{`Default: `}<inlineCode parentName=\"p\">{`true`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"validateonupdate\"\n    }}>{`validateOnUpdate`}</h3>\n    <p><em parentName=\"p\">{`Whether the provided validate function should be called on `}<strong parentName=\"em\">{`any`}</strong>{` form change.`}</em></p>\n    <p>{`Type: `}<inlineCode parentName=\"p\">{`boolean`}</inlineCode></p>\n    <p>{`Default: `}<inlineCode parentName=\"p\">{`false`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"destroyonunmount\"\n    }}>{`destroyOnUnmount`}</h3>\n    <p><em parentName=\"p\">{`Whether the field should be completely removed from the form state on unmount.`}</em></p>\n    <p>{`Type: `}<inlineCode parentName=\"p\">{`boolean`}</inlineCode></p>\n    <p>{`Default: `}<inlineCode parentName=\"p\">{`false`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"types\"\n    }}>{`Types`}</h2>\n    <h3 {...{\n      \"id\": \"usefieldprops\"\n    }}>{`UseFieldProps`}</h3>\n    <p>{`Props which can be passed to a form element / component.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`type UseFieldProps<T = any> = {\n  readonly name: string;\n  readonly value: T;\n  readonly onChange: ChangeEventHandler | (value: T) => void;\n  readonly onBlur: () => void;\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"usefieldmeta\"\n    }}>{`UseFieldMeta`}</h3>\n    <p>{`Additional information about a field and it's validation state.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`type UseFieldMeta = {\n  /** Validation error. */\n  readonly error?: Error | string;\n  /** Valid state. */\n  readonly isValid: boolean;\n  /** Async validation is in progress. */\n  readonly isValidating: boolean;\n  /** onBlur has been called since mount/remount. */\n  readonly hasBlurred: boolean;\n  /** onChange has been called since mount/remount. */\n  readonly hasChanged: boolean;\n};\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}