{"version":3,"sources":["webpack:///../src/guides/submission.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,2MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,cADR,cAGA,kGACA,iBAAQ,CACN,GAAM,gBADR,gBAGA,+DAA8C,mBAAGC,WAAW,KAAQ,CAChE,KAAQ,4CADkC,2CAA9C,6BAGA,8BACE,iBAAGA,WAAW,cAAd,+HAEF,oCAAmB,sBAAQA,WAAW,KAAnB,iCAAnB,QAA6F,0BAAYA,WAAW,KAAvB,YAA7F,KACA,iBAAQ,CACN,GAAM,sBADR,sBAGA,iIACA,8BACE,iBAAGA,WAAW,cAAd,mDAA+E,mBAAGA,WAAW,KAAQ,CACjG,KAAQ,wBACP,0BAAYA,WAAW,KAAvB,qBAEP,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,yiBAyBL,iBAAQ,CACN,GAAM,2BADR,2BAGA,kGACA,iBAAQ,CACN,GAAM,qBADR,qBAGA,0GACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+QAWL,iBAAQ,CACN,GAAM,8BADR,8BAGA,+HACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,qKAML,sFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,2Y,yMAkBTJ,EAAWK,gBAAiB","file":"component---src-guides-submission-mdx-d46a5c58f9d5bc0bdaf9.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/andyrichardson/development/form/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"submission\"\n    }}>{`Submission`}</h1>\n    <p>{`Unsure what to do once you're ready to submit your form? Look no further.`}</p>\n    <h2 {...{\n      \"id\": \"how-it-works\"\n    }}>{`How it works`}</h2>\n    <p>{`Just as fields and their validation is `}<a parentName=\"p\" {...{\n        \"href\": \"/guides/validation#how-validation-works\"\n      }}>{`conditional on your application's state`}</a>{`, so is submission logic.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Particularly with branching forms, there may be multiple different end results (and therefore differing submission logic).`}</p>\n    </blockquote>\n    <p>{`This is why `}<strong parentName=\"p\">{`there is no onSubmit argument`}</strong>{` for `}<inlineCode parentName=\"p\">{`useField`}</inlineCode>{`.`}</p>\n    <h2 {...{\n      \"id\": \"example-submission\"\n    }}>{`Example submission`}</h2>\n    <p>{`Submission logic should be colocated with the associated submission trigger (such as a 'submit' button).`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`To access the form state on submission, there's `}<a parentName=\"p\" {...{\n          \"href\": \"/api/useformcontext\"\n        }}><inlineCode parentName=\"a\">{`useFormContext`}</inlineCode></a></p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const MySubmitComponent = () => {\n  const { fields, isValid } = useFormContext();\n  const [nameProps] = useField({ name: 'name' });\n\n  const handleSubmit = useCallback(() => {\n    const data = transformFields(fields); // Create your own transformer\n\n    fetch('/api/submit', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }, [fields]);\n\n  return (\n    <>\n      <input type=\"text\" {...nameProps} />\n      <button disabled={!isValid} onClick={handleSubmit}>\n        Submit\n      </button>\n    </>\n  );\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"transforming-form-state\"\n    }}>{`Transforming form state`}</h2>\n    <p>{`You'll want to transform the form state into values your API can consume.`}</p>\n    <h3 {...{\n      \"id\": \"extracting-values\"\n    }}>{`Extracting values`}</h3>\n    <p>{`A simple reducer can be used to get a key-value representation of the form state.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const { fields } = useFormContext();\n// fields = { field1: { value: 'hello', hasChanged: true, ... } ... }\n\nconst transformed = Object.entries(fields).reduce(\n  (p, [key, field]) => ({ [key]: field.value }),\n  {}\n);\n// transformed = { field1: 'hello', ... }\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"converting-checkbox-values\"\n    }}>{`Converting checkbox values`}</h3>\n    <p>{`If you find yourself needing to transform your checkbox values to objects, a reducer can also be used.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const arrayToObject = (array: string[]) =>\n  Object.values(array).reduce((p, value) => ({ ...p, [value]: true }), {});\n// ['a', 'b'] -> { a: true, b: true }\n`}</code></pre>\n    <p>{`This function can then be combined with the previous example.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const { fields } = useFormContext();\n// fields = { field1: { value: ['value1', 'value3'], hasChanged: true, ... } ... }\n\nconst transformed = Object.entries(fields).reduce(\n  (p, [key, field]) =>\n    Array.isArray(field.value)\n      ? { ...p, ...arrayToObject(field.value) }\n      : { ...p, [key]: field.value },\n  {}\n);\n// transformed = { value1: true, value3: true, ... }\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}