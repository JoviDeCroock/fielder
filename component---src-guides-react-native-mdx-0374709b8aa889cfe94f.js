(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{ypa0:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return i})),n.d(t,"default",(function(){return l}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk"),n("mXGw");var a=n("/FXl"),r=n("TjRS");n("aD51");function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var i={};void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/guides/react-native.mdx"}});var p={_frontmatter:i},s=r.a;function l(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(a.b)(s,o({},p,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"react-native"},"React Native"),Object(a.b)("p",null,"Because Fielder, at it's core, is a state management library, React Native is fully supported out of the box."),Object(a.b)("h2",{id:"differences-from-web"},"Differences from web"),Object(a.b)("p",null,"The API is identical with the only limitations being dependent on your component library."),Object(a.b)("p",null,"Unlike in web, most popular React Native form component's don't adhere to a prop naming standard (i.e. ",Object(a.b)("em",{parentName:"p"},"onChange"),", ",Object(a.b)("em",{parentName:"p"},"onBlur"),", ",Object(a.b)("em",{parentName:"p"},"value"),", etc).\nBecause of this, you'll need to proxy the provided ",Object(a.b)("a",o({parentName:"p"},{href:"../api/usefield/#usefieldprops"}),"UseFieldProps")," to work with your components."),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-tsx"}),"const [fieldProps, fieldMeta] = useField({ name: 'firstName' });\n\nreturn (\n  // React (web)\n  <input {...fieldProps} />\n  // React Native\n  <TextInput {...fieldProps} onChangeText={fieldProps.onChange} /> // TextInput change prop is called 'onChangeText'\n);\n")),Object(a.b)("h3",{id:"scaling-this-up"},"Scaling this up"),Object(a.b)("p",null,"It might be worth creating your own ",Object(a.b)("em",{parentName:"p"},"useField")," proxy hooks if you find yourself having to proxy props frequently."),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-tsx"}),"export const useTextField = (...args: Parameters<typeof useField>) => {\n  const [fieldProps, fieldMeta] = useField(..args);\n\n  return useMemo(() => [\n    { ...fieldProps, onChangeText: fieldProps.onChange }, // Apply needed transforms here\n    fieldMeta,\n  ], [fieldProps, fieldMeta]);\n};\n")),Object(a.b)("h2",{id:"examples"},"Examples"),Object(a.b)("p",null,"Check out the ",Object(a.b)("a",o({parentName:"p"},{href:"https://github.com/andyrichardson/fielder/tree/master/examples/4-native"}),"React Native example repo"),"."))}void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/guides/react-native.mdx"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-guides-react-native-mdx-0374709b8aa889cfe94f.js.map