(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{WOoP:function(e,a,t){"use strict";t.r(a),t.d(a,"_frontmatter",(function(){return o})),t.d(a,"default",(function(){return d}));t("5hJT"),t("W1QL"),t("K/PF"),t("t91x"),t("75LO"),t("PJhk"),t("mXGw");var n=t("/FXl"),i=t("TjRS");t("aD51");function r(){return(r=Object.assign||function(e){for(var a=1;a<arguments.length;a++){var t=arguments[a];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e}).apply(this,arguments)}var o={};void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/guides/validation.mdx"}});var s={_frontmatter:o},l=i.a;function d(e){var a=e.components,t=function(e,a){if(null==e)return{};var t,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(i[t]=e[t]);return i}(e,["components"]);return Object(n.b)(l,r({},s,t,{components:a,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"validation"},"Validation"),Object(n.b)("p",null,"Validation is one of the key ways in which Fielder differentiates itself from other libraries."),Object(n.b)("h2",{id:"how-validation-works"},"How validation works"),Object(n.b)("p",null,"While most libraries require a form's validation criteria to be declared upfront, Fielder\ntreats validation as an ",Object(n.b)("strong",{parentName:"p"},"evolutionary")," process."),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Fielder allows you to have a valid state, even if your whole form isn't ready to be submitted")),Object(n.b)("p",null,"This has the following advantages:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"Validation can be incrementally added"),Object(n.b)("li",{parentName:"ul"},"Presenting validation state to the user is much simpler"),Object(n.b)("li",{parentName:"ul"},"Wizards/steppers/multi-page forms just work (see below)")),Object(n.b)("h3",{id:"valid-states"},"Valid states"),Object(n.b)("p",null,"A form is valid when all ",Object(n.b)("strong",{parentName:"p"},"visible")," fields are valid."),Object(n.b)("p",null,"A valid state implies the user has done their job and is able to progress to the next action (i.e. next page, next section, submit)."),Object(n.b)("h3",{id:"using-validation"},"Using validation"),Object(n.b)("p",null,"Adding validation is as simple as providing a function to ",Object(n.b)("inlineCode",{parentName:"p"},"useField")," which is called on a given change event."),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"Form-wide validation is not supported in Fielder (see above for reasons why).")),Object(n.b)("h2",{id:"basic-validation"},"Basic validation"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-tsx"}),"useField({\n  name: 'password'\n  validate: validatePassword,\n});\n\n// ...\nconst validatePassword = (val) => {\n  if (!val || val.length < 8) {\n    throw Error(\"Password must be 8 characters long\");\n  }\n};\n")),Object(n.b)("p",null,"Your validation function should take 1 or 2 values (field state and form state, respectively), and should\nthrow an error orn string if validation is not successful."),Object(n.b)("h2",{id:"cross-field-validation"},"Cross field validation"),Object(n.b)("p",null,"The below example demonstrates is a cross field validation function which checks other values within the form."),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-tsx"}),"const validateDrink = (val, state) => {\n  if (Number(state.age.value) < 21 && val === 'Beer') {\n    throw Error('You must be 21 to order Beer');\n  }\n};\n")),Object(n.b)("h2",{id:"conditional-validation"},"Conditional validation"),Object(n.b)("p",null,"As you would expect, Fielder reacts to changes to it's hooks. This means validation functions\ncan be conditionally added, changed and/or removed at any time."),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-tsx"}),"useField({\n  name: 'password'\n  validate: useMemo(() =>\n    shouldValidate ? validatePassword : undefined,\n    [shouldValidate]\n  ),\n});\n")),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"You'll want to wrap any functions being declared inside of a component with ",Object(n.b)("inlineCode",{parentName:"p"},"useCallback"))),Object(n.b)("h2",{id:"using-3rd-party-libraries"},"Using 3rd party libraries"),Object(n.b)("p",null,"You can use simple JS, or any validation library you desire (including ",Object(n.b)("inlineCode",{parentName:"p"},"Yup"),")."),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-tsx"}),"const validateFn = (val) => Yup.string().validateSync(val);\n")),Object(n.b)("blockquote",null,Object(n.b)("p",{parentName:"blockquote"},"It's advised that you use synchronous validation where possible to reduce the number of\nrenders in your form.")),Object(n.b)("h2",{id:"presenting-validation"},"Presenting validation"),Object(n.b)("p",null,"Field level validation messages can be presented to the user conditionally using the ",Object(n.b)("a",r({parentName:"p"},{href:"/api/usefield/#usefieldmeta"}),"field metadata"),"."),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-jsx"}),"const [usernameProps, usernameMeta] = useField({\n  name: 'username'\n  validate: validateUsername,\n});\nconst [passwordProps, passwordMeta] = useField({\n  name: 'password'\n  validate: validatePassword,\n});\n\nreturn (\n  <>\n    {/* Field shows any validation errors on change. */}\n    <input type=\"text\" {...usernameProps} />\n    {usernameMeta.hasChanged && usernameMeta.error && <ErrorMessage>{usernameMeta.error}</ErrorMessage>}\n    {/* Field shows any validation errors on blur. */}\n    <input type=\"password\" {...passwordProps} />\n    {passwordMeta.hasBlurred && passwordMeta.error && <ErrorMessage>{passwordMeta.error}</ErrorMessage>}\n  </>\n)\n")),Object(n.b)("p",null,"You can also use the form-wide validation state to prevent users from proceeding."),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-jsx"}),"const { isValid } = useFormContext();\n\n//...\n\nreturn (\n  <button disabled={!isValid} onClick={handleSubmit}>\n    Submit\n  </button>\n);\n")))}void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/guides/validation.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-guides-validation-mdx-0a73033666fbaf2197ce.js.map