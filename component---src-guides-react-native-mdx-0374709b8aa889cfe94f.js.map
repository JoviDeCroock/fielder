{"version":3,"sources":["webpack:///../src/guides/react-native.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mfAMO,IAAMA,EAAe,Q,6MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,sIACA,iBAAQ,CACN,GAAM,wBADR,wBAGA,kHACA,+HAA8G,kBAAIC,WAAW,KAAf,YAA9G,KAAwJ,kBAAIA,WAAW,KAAf,UAAxJ,KAAgM,kBAAIA,WAAW,KAAf,SAAhM,+DACiD,mBAAGA,WAAW,KAAQ,CACnE,KAAQ,mCADqC,iBADjD,kCAIA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,+QAWL,iBAAQ,CACN,GAAM,mBADR,mBAGA,4DAA2C,kBAAIA,WAAW,KAAf,YAA3C,uEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,8SAWL,iBAAQ,CACN,GAAM,YADR,YAGA,sCAAqB,mBAAGA,WAAW,KAAQ,CACvC,KAAQ,4EADS,6BAArB,W,2MAOJJ,EAAWK,gBAAiB","file":"component---src-guides-react-native-mdx-0374709b8aa889cfe94f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/andyrichardson/development/form/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"react-native\"\n    }}>{`React Native`}</h1>\n    <p>{`Because Fielder, at it's core, is a state management library, React Native is fully supported out of the box.`}</p>\n    <h2 {...{\n      \"id\": \"differences-from-web\"\n    }}>{`Differences from web`}</h2>\n    <p>{`The API is identical with the only limitations being dependent on your component library.`}</p>\n    <p>{`Unlike in web, most popular React Native form component's don't adhere to a prop naming standard (i.e. `}<em parentName=\"p\">{`onChange`}</em>{`, `}<em parentName=\"p\">{`onBlur`}</em>{`, `}<em parentName=\"p\">{`value`}</em>{`, etc).\nBecause of this, you'll need to proxy the provided `}<a parentName=\"p\" {...{\n        \"href\": \"../api/usefield/#usefieldprops\"\n      }}>{`UseFieldProps`}</a>{` to work with your components.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const [fieldProps, fieldMeta] = useField({ name: 'firstName' });\n\nreturn (\n  // React (web)\n  <input {...fieldProps} />\n  // React Native\n  <TextInput {...fieldProps} onChangeText={fieldProps.onChange} /> // TextInput change prop is called 'onChangeText'\n);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"scaling-this-up\"\n    }}>{`Scaling this up`}</h3>\n    <p>{`It might be worth creating your own `}<em parentName=\"p\">{`useField`}</em>{` proxy hooks if you find yourself having to proxy props frequently.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`export const useTextField = (...args: Parameters<typeof useField>) => {\n  const [fieldProps, fieldMeta] = useField(..args);\n\n  return useMemo(() => [\n    { ...fieldProps, onChangeText: fieldProps.onChange }, // Apply needed transforms here\n    fieldMeta,\n  ], [fieldProps, fieldMeta]);\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <p>{`Check out the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/andyrichardson/fielder/tree/master/examples/4-native\"\n      }}>{`React Native example repo`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}